getwd()
5 + 8 #
5 + 8 #
5 + 8
5 + 8
5 + 8
5 + 8
5 + 8
5 + 8
5 + 8
5 + 8
resultado <-  sqrt(4)**2  + 4/2
resultado + 5
resultado = 3
string <- "Hola"
class(string)
class(string)
TRUE
T
FALSE
F
7 == 8
7 != 8
7 == 8
7 != 8
7 != 8
7 != 8
7 != 8
7 != 8
7 != 8
x <- c(1,6,2,45)
y <- c(1:4)
y  <-  c(2:4, 135)
y <- seq(1,8,2)
y <- seq(1,8,2)
y <- seq(1,8,2)
clear
y <- seq(1,8,2)
y <- seq(1,8,2)
y <- seq(1,8,2)
y <- seq(1,8,2)
vectorvacio <- vector()
cbind(x,y)
rbind(x,y)
cbind(c('John','Paul'),c('George','Ringo')) # deben ser todos el mismo tipo de objeto (character en este caso)
mezcla <-  c('hola',T,35)
mezcla
## Funciones
class(setwd)
## Funciones
class(setwd)
## Funciones
class(setwd)
?setwd
help(setwd)
?matrix
# AdemÃ¡s hay librerÃ­as o paquetes con funciones extra
install.packages("ggplot2") # asÃ­ las instalo. Esta es una para grÃ¡ficos, muy usada
library('ggplot2') #siempre debo abrirla antes de usar las funciones que trae adentro
# Entre otras...
min(w) # valor mÃ­nimo del vector
max(w)  # valor mÃ¡ximo del vector
w = x+y #lo guardamos
#Si tienen el mismo tamaÃ±o, adiciÃ³n de vectores
x+y
max(w)  # valor mÃ¡ximo del vector
# Si queremos ver todos los objetos de "Enviroment":
ls()
# Para borrar objetos:
rm(x,y)
ls() # Chequeamos lo que nos queda
#Para borrar todo lo que tenemos:
rm(list=ls())
# --------> VECTORES ALEATORIOS Y CORRELACIONES ####
rnorm(5)
set.seed(444)
# VeÃ¡moslo:
set.seed(444)
rnorm(5)
# --------> VECTORES ALEATORIOS Y CORRELACIONES ####
rnorm(5)
set.seed(444)
# VeÃ¡moslo:
set.seed(444)
rnorm(5)
rnorm(5)
set.seed(444)
rnorm(5)
rnorm(5)
#Creamos dos vectores aleatorios
set.seed(444)
x <- rnorm(10) # normal estÃ¡ndar
y <- x+rnorm(10,mean=50,sd=0.1) # normal indicando media y varianza
cor(x,y) # correlaciÃ³n
x <- rnorm(10) # normal estÃ¡ndar
y <- x+rnorm(10,mean=50,sd=0.1) # normal indicando media y varianza
cor(x,y) # correlaciÃ³n
mean(y) # media
var(y) # varianza
sd(y) # desvÃ­o estÃ¡ndar
?rbinom
install.packages('MASS') #es una librerÃ­a que tiene bases de datos guardadas, instalo la librerÃ­a
library(MASS) #abro la librerÃ­a
class(Boston)
library(MASS) #abro la librerÃ­a
class(Boston)
?Boston # tiene un objeto Boston que es una base de datos, si pido ayuda me da una descripciÃ³n completa de cada variable
class(Boston)
names(Boston) # Vemos los nombres de la base y ubicamos la base como objeto
str(Boston) # vemos variables y tipo
head(Boston) # miro las primeras filas
# Dimension
dim(Boston) #506 filas y 14 columnas
# Subsetting: seleccionar un subconjunto de los datos
# dataset[FILAS,COLUMNAS]
Boston[c(1,2),1:5] #filas 1 y 2 de las columnas 1 a 5
Boston[2,] # fila 2 y todas las columnas
Boston[1:10,c("indus","age")] #acÃ¡ miro solo las primeras 10
Boston$chas[40:50]
Boston$chas[40:50]
# Missing values
# En R los missing values aparecen como NA
# La base Boston
is.na(Boston) # me muestra en cada lugar si hay NA... ImprÃ¡ctico, no se ve nada. "Truco":
# Missing values
# En R los missing values aparecen como NA
# La base Boston
is.na(Boston) # me muestra en cada lugar si hay NA... ImprÃ¡ctico, no se ve nada. "Truco":
# Missing values
# En R los missing values aparecen como NA
# La base Boston
is.na(Boston) # me muestra en cada lugar si hay NA... ImprÃ¡ctico, no se ve nada. "Truco":
# Missing values
# En R los missing values aparecen como NA
# La base Boston
is.na(Boston) # me muestra en cada lugar si hay NA... ImprÃ¡ctico, no se ve nada. "Truco":
Boston$chas # con el signo $ tambiÃ©n selecciono una columna por su nombre
Boston$chas # con el signo $ tambiÃ©n selecciono una columna por su nombre
Boston$chas[40:50]
class(boston$chass)
class(Boston$chass)
class(Boston$chass)
class(Boston$chass[40:50])
class(Boston$chass[40:50])
# Missing values
# En R los missing values aparecen como NA
# La base Boston
is.na(Boston) # me muestra en cada lugar si hay NA... ImprÃ¡ctico, no se ve nada. "Truco":
sum(is.na(Boston)) # Los FALSE valen 0 y los TRUE 1. Si sumo, veo cuÃ¡ntos NA hay.
# Supongamos que tuviera valores nulos.... Voy a crear una nueva columna con algunos nulos
Boston_n  <-  Boston # creo una copia de la base en Boston_n
Boston_n$connulos  <-  1 # cree una variable que vale siempre 1
View(Boston_n)
Boston_n$connulos[c(4,3,5,8:13)] <-  NA  # meto NA en algunas filas
Boston_n$connulos[c(4,3,5,8:13)] <-  NA  # meto NA en algunas filas
sum(is.na(Boston_n$connulos)) # todos en la variable que cree
# Dropear missing values
Boston_n  <-  na.omit(Boston_n)
# Dropear missing values
Boston_n  <-  na.omit(Boston_n)
# Dropear missing values
Boston_n  <-  na.omit(Boston_n)
summary(Boston)
# Alternativas con mÃ¡s detalles
install.packages("Hmisc")
library("Hmisc")
lm.fit <- lm(medv~lstat, data = Boston)
# Alternativas:
lm.fit <- lm(Boston$medv~Boston$lstat)
# Alternativas:
lm.fit <- lm(Boston$medv~Boston$lstat)
attach(Boston)
lm.fit <- lm(medv~lstat)
# Si queremos saber que informaciÃ³n guarda el comando lm() usamos names():
names(lm.fit)
# Para ver la estimaciÃ³n de los coeficientes corremos:
lm.fit #Vemos solo los coeficientes
# Alternativas:
coef(lm.fit)
lm.fit$coefficients  # TambiÃ©n nos muestra los coeficientes
confint(lm.fit) # Intervalo de confianza al 95% de los coeficientes
summary(lm.fit) # InformaciÃ³n mÃ¡s detallada de los estadÃ­sticos.
lm.fit.1 = lm(medv~lstat+age,data=Boston)
summary(lm.fit.1)
# RegresiÃ³n de la mediana del valor de una casa en  TODAS las variables
lm.fit.2=lm(medv~.,data=Boston)
summary(lm.fit.2)
# RegresiÃ³n de la mediana del valor de una casa en  TODAS las variables menos edad
lm.fit3=lm(medv~.-age,data=Boston)
summary(lm.fit3)
summary(lm(medv~lstat*age,data=Boston))
library(stargazer)
install.packages("stargazer")
stargazer(lm.fit, lm.fit.1,
type = "text", # con text eligen como ver el output: texto (text) o latex (latex)
keep.stat = c("n", "rsq")   # Elijo que muestre la cantidad de obs y el R2
)
stargazer(lm.fit, lm.fit.1,
type = "text", # con text eligen como ver el output: texto (text) o latex (latex)
keep.stat = c("n", "rsq")   # Elijo que muestre la cantidad de obs y el R2
stall.packages("stargazer")
stargazer(lm.fit, lm.fit.1,
type = "text", # con text eligen como ver el output: texto (text) o latex (latex)
keep.stat = c("n", "rsq")   # Elijo que muestre la cantidad de obs y el R2
# Pueden ver muchas otras opciones para dejar la tabla prolija
?stargazer
install.packages("stargazer")
stargazer(lm.fit, lm.fit.1,
type = "text", # con text eligen como ver el output: texto (text) o latex (latex)
keep.stat = c("n", "rsq")   # Elijo que muestre la cantidad de obs y el R2
# Cargar bases desde Excel:
install.packages("readxl")
library(readxl)
install.packages("readxl")
library(readxl)
df <- read_excel("df.xlsx")
df <- read_excel("df.xlsx")
# Guardamos en csv
write.csv(df, file = "df.csv")
install.packages("readxl")
library(readxl)
install.packages("readxl")
df <- read_excel("df.xlsx")
df <- read_excel("df.xlsx")
# GrÃ¡fico de dispersiÃ³n de las variables
pairs(df, col="blue")
rm(list = ls())
# Parámetros
n_anual <- 0.011   # Tasa de crecimiento poblacional anual
n_35y <- 0.483      # Crecimiento de la población en 35 años
rgdp_35 <- 20865075    # PBI real per cápita en pesos constantes del 2003
alpha <- 0.43      # Share de capital en la función Cobb-Douglas
rho <- 4.52     # Tasa de descuento
# Parámetros
rm(list = ls())
n_anual <- 0.011   # Tasa de crecimiento poblacional anual
n_35y <- 0.483      # Crecimiento de la población en 35 años
rgdp_35 <- 20865075    # PBI real per cápita en pesos constantes del 2003
alpha <- 0.43      # Share de capital en la función Cobb-Douglas
rho <- 4.52     # Tasa de descuento
# Parámetros
rm(list = ls())
n_anual <- 0.011   # Tasa de crecimiento poblacional anual
n_35y <- (1-0.01)^35-1    # Crecimiento de la población en 35 años
# Crecimiento de la población en 35 años
rgdp_35 <- 20865075    # PBI real per cápita en pesos constantes del 2003
alpha <- 0.43      # Share de capital en la función Cobb-Douglas
rho <- 4.52     # Tasa de descuento
A <- ((((2+rho)*(1+n_35y))/(1-alpha))^(alpha))*(rgdp_35)^(1-alpha)
k_star <- (( (1 - alpha) * A ) / ( (2 + rho) * (1 + n_35y) ))^(1 / (1 - alpha))
f_kt <- A * (k_star^alpha)
ratiok <- k_star / f_kt
PMGK <- alpha * A * (k_star^(alpha - 1))
wt<- (1-alpha)*A*(k_star^alpha)
k_star
f_kt
wt
chequeo <- PMGK * k_star + wt
chequeo
retribk <- f_kt*PMGK
retribk <- k_star*PMGK
salario<- f_kt - k_star
retribk <- k_star*PMGK
retribk
salario<- f_kt - k_star
salario
retribk <- k_star*PMGK
retribk
salario<- f_kt - retribk
salario
aaa <- retribk + salario
aaa <- retribk + salario
aaa
chequeo <- PMGK * k_star
chequeo
retribk <- k_star*PMGK
retribk
salario<- f_kt - retribk
salario
aaa <- retribk + salario
aaa
ribkviejo<- 1230002.68379053 * 7.29427859649122
retribkviejo
retribkviejo <- 1230002.68379053 * 7.29427859649122
retribkviejo
clear
rm(list = ls())
setwd("C:/Users/sebib/Documents/GitHub/ECONOMETR-A")
getwd()
library(dplyr)
dir()
install.packages("xtable")
install.packages("openxlsx")
install.packages("ggplot2")
library(openxlsx)
library(xtable)
library(ggplot2)
library(ggplot2)
install.packages("readxl")
library(ggplot2)
library(readxl)
df <- read_excel("cornwell.xlsx")
df <- read_excel("cornwell.csv")
data <- read_csv("cornwell.csv")
brary(openxlsx)
df <- read_csv("cornwell.csv")
rm(list = ls())
getwd()
setwd("C:/Users/sebib/Documents/GitHub/ECONOMETR-A")
setwd("C:/Users/sebib/Documents/GitHub/ECONOMETR-A")
getwd()
dir()
install.packages("xtable")
install.packages("readxl")
# Cargar librerías
library(tidyverse)
install.packages("xtable")
# Leer la base local
datos <- read.csv("cornwell.csv")
glimpse(datos)
# Estimar el modelo por MCO (sin efectos fijos)
modelo_ols <- lm(lcrmrte ~ lprbarr + lprbconv + lavgsen + lpolpc, data = datos)
summary(modelo_ols)
library(plm)
install.packages("plm")
library(plm)
# Declarar el panel
panel_datos <- pdata.frame(datos, index = c("county", "year"))
# Estimar efectos fijos por condado (modelo within)
modelo_fe <- plm(lcrmrte ~ lprbarr + lprbconv + lavgsen + lpolpc,
data = panel_datos,
model = "within")
# Ver resumen
summary(modelo_fe)
View(panel_datos)
load("C:/Users/sebib/Documents/GitHub/ECONOMETR-A/.RData")
